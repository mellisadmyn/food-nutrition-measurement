procedure nutrition(file_path)
    input   : file_path berupa path dari file csv yang akan dibaca dan input kelompok usia yang sesuai dengan pengguna
    output  : nilai kebutuhan_nutrisi yang sesuai dari kelompok usia pengguna

    kelompok_usia ← []
    with open(file_path, "r") as file:
        reader = csv.reader(file)
        for row ∈ reader do
            kelompok_usia.append(row)
        end for
    
    for i ← 0 to (len(kelompok_usia)-1) do
        nomor       = i + 1
        kelompok    = kelompok_usia[i][0]
        print(nomor + ". " + kelompok)
    end for

    kelompok = input("Pilih kelompok usia: ")

    kebutuhan_nutrisi = {
        1: 2000, 2: 2400, 3: 2650, 4: 2650, 5: 2550, 6: 2150, 7: 1800,
        8: 1600, 9: 1900, 10: 2050, 11: 2100, 12: 2250, 13: 2150,
        14: 1800, 15: 1550, 16: 1400
    }.get(kelompok, None)

    if kebutuhan_nutrisi is None:
        print("Kelompok usia yang anda masukkan tidak ada. Coba ulangi!")
    end if

    return kebutuhan_nutrisi
end procedure


# membuat suatu class yaitu Node
class Node:
    def __init__(self, level, energi_makanan, harga_makanan, menu_makanan):
        self.level          = level
        self.energi_makanan = energi_makanan
        self.harga_makanan  = harga_makanan
        self.menu_makanan   = menu_makanan


procedure cost(simpul, menu_makanan_terurut[0…n-1], uang_tersedia)
    bound        ← simpul.energi_makanan
    total_harga  ← simpul.harga_makanan
    level        ← simpul.level

    while (level < len(menu_makanan_terurut)) and (total_harga + menu_makanan_terurut[level][1] <= uang_tersedia) do
        level        += 1
        total_harga  += menu_makanan_terurut[level][1]
        bound        += menu_makanan_terurut[level][2]
    
    if level < len(menu_makanan_terurut) then
        bound        += (uang_tersedia - total_harga) * (menu_makanan_terurut[level][2]/menu_makanan_terurut[level][1])
    end if

    return bound
end procedure


procedure nutrition_measurement(menu_makanan[0…n-1], uang_tersedia)
    input   : menu_makanan yang berisi list menu dan uang_tersedia yang pengguna masukkan
    output  : perolehan_nutrisi yaitu jumlah nutrisi yang diperoleh dan menu_anjuran yaitu menu yang terpilih

    # menghitung densitas suatu makanan
    procedure rasio(item):
        return item[2]/item[1]
    end procedure

    # mengurutkan menu makanan berdasarkan densitas tertinggi ke terendah
    for i ← 0 to (len(menu_makanan)-1) do
        maksimum_density ← i
        for j ← i+1 to (len(menu_makanan)-1) do
            if rasio(menu_makanan[j]) > rasio(menu_makanan[maksimum_density]) then
                maksimum_density ← j
            end if
        end for

        temp                            ← menu_makanan[i]
        menu_makanan[i]                 ← menu_makanan[maksimum_density]
        menu_makanan[maksimum_density]  ← temp
    end for

    queue                ← []
    perolehan_nutrisi    ← 0
    menu_makanan_terurut ← menu_makanan

    # membuat simpul akar pada pohon ruang status
    simpul_akar          = Node(level=0, energi_makanan=0, harga_makanan=0, menu_makanan=[])
    queue.append(simpul_akar)

    # algoritma branch and bound
    while queue is not empty do
        simpul ← queue.pop(0)
        if simpul.level == (len(menu_makanan)-1) then
            continue
        end if

        # membuat simpul anak di cabang kiri yang menyatakan makanan saat ini dipilih (Xi=1)
        simpul_anak = Node(level = simpul.level + 1,
            energi_makanan  = simpul.energi_makanan + menu_makanan_terurut[simpul.level][2],
            harga_makanan   = simpul.harga_makanan  + menu_makanan_terurut[simpul.level][1],
            menu_makanan    = simpul.menu_makanan   + [menu_makanan_terurut[simpul.level][0]])

        # jika simpul anak masih memenuhi uang yang tersedia
        if simpul_anak.harga_makanan <= uang_tersedia then
            if simpul_anak.energi_makanan > perolehan_nutrisi then
                perolehan_nutrisi      ← simpul_anak.energi_makanan
                menu_anjuran           ← simpul_anak.menu_makanan
            end if
            queue.append(simpul_anak)
        end if

        # membuat simpul anak di cabang kanan yang menyatakan makanan saat ini tidak dipilih (Xi=0)
        simpul_anak = Node(level = simpul.level + 1,
            energi_makanan  = simpul.energi_makanan + 0,
            harga_makanan   = simpul.harga_makanan + 0,
            menu_makanan    = simpul.menu_makanan + 0)

        # menghitung cost simpul
        bound = cost(simpul_anak, menu_makanan_terurut, uang_tersedia)

        # jika simpul masih mungkin menghasilkan nutrisi lebih besar daripada perolehan_nutrisi
        if bound > perolehan_nutrisi then
            queue.append(simpul_anak)
        end if

    return perolehan_nutrisi, menu_anjuran
end procedure


procedure mainProgram()
    kebutuhan_nutrisi               = nutrition(file_path)
    menu_makanan                    = [("Menu Makanan 1 - Rumah Makan 1", harga makanan 1, energi makanan 1), ("Menu Makanan 2 - Rumah Makan 2", harga makanna 2, energi makanan 2), ..., ("Menu Makanan n - Rumah Makan n", harga makanan n, energi makanan n)]
    uang_tersedia                   = input("Masukkan uang yang tersedia: ")
    perolehan_nutrisi, menu_anjuran = nutrition_measurement(menu_makanan, uang_tersedia)

    print("Kebutuhan nutrisi harian \t :", kebutuhan_nutrisi)
    print("Kebutuhan nutrisi yang diperoleh :", perolehan_nutrisi)
    print("Menu makanan yang dianjurkan \t :",menu_anjuran)

    if perolehan_nutrisi < kebutuhan_nutrisi then
        print("Kebutuhan gizi harian masih belum terpenuhi")
    elif perolehan_nutrisi == kebutuhan_nutrisi then
        print("Kebutuhan gizi harian telah terpenuhi")
    end if
end procedure   
mainProgram()